import asyncio
import MySQLdb
from bleak import BleakClient


DEVICE_ADDRESS = "D6:70:31:A5:1D:5E"
CHARACTERISTIC_UUID = "00001526-1212-efde-1523-785feabcd123"


db_config = {
    'host': '172.20.241.51',
    'user': 'remote_users',  
    'passwd': 'your_password',  
    'db': 'ble_data'
}

def save_to_database(values):
    """Save received values to the MySQL database."""
    try:
        
        conn = MySQLdb.connect(**db_config)
        cursor = conn.cursor()

       
        query = "INSERT INTO sensor_values (x_value, y_value, z_value, pos_value) VALUES (%s, %s, %s, %s)"
        cursor.execute(query, values)

        
        conn.commit()
        print(f"Saved to database: {values}")
        cursor.close()
        conn.close()
    except MySQLdb.Error as err:
        print(f"Database error: {err}")

def notification_handler(sender, data):
    """Handles incoming data from the BLE device."""
    try:
        
        values = data.decode("utf-8").strip().split(",")
        values = [value.strip() for value in values]

        
        if len(values) == 4:
            x, y, z, pos = values
            print(f"Received values: x={x}, y={y}, z={z}, pos={pos}")

            
            save_to_database((float(x), float(y), float(z), pos))
        else:
            print(f"Unexpected format: {values}")
    except Exception as e:
        print(f"Error parsing notification: {e}")

async def main():
    print("Attempting to connect to the device...")
    async with BleakClient(DEVICE_ADDRESS) as client:
        print("Connected to device.")
        await asyncio.sleep(2)

        print("Discovering services...")
        characteristic = None
        for service in client.services:
            for char in service.characteristics:
                if char.uuid == CHARACTERISTIC_UUID:
                    characteristic = char
                    break

        if characteristic and "notify" in characteristic.properties:
            print(f"Found characteristic: {CHARACTERISTIC_UUID}. Subscribing to notifications...")
            await asyncio.sleep(1)
            await client.start_notify(CHARACTERISTIC_UUID, notification_handler)
            try:
                print("Waiting for notifications (Ctrl+C to exit)...")
                while True:
                    await asyncio.sleep(1)
            except KeyboardInterrupt:
                print("Stopping notifications...")
                await client.stop_notify(CHARACTERISTIC_UUID)
        else:
            print("Characteristic not found or does not support notifications.")

if __name__ == "__main__":
    asyncio.run(main())
